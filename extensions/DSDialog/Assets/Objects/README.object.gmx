<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///README
/*

DS-Dialogue-System
Version: 19-July-2016 (1.3.0)
by Dani Sander

*/

//General
/*

The following project is an implementation of a "dating sim" style branching dialogue system.
It can however be changed and used for multiple genres, such as RPGs and others.

With just this system, it is possible to create extensive visual novel type games.

In the project is included a fully documented and commented dialogue system, as well as a fully
documented and commented example of how to use the system and its features.

The system covers all the basics with typewriter letter by letter effect, sequentially played dialogue,
displaying characters on screen and playing soundfiles. 

Additonally it supports a fully feature rich branching dialogue system with an extensive amount of different
branch types to allow for extreme customizability. It allows for nested branches, aswell as Save/Load on trees.

Additionally allows for pausing/resuming/skipping of dialogue aswell as the possibility to export entire code tree
to a readable textfile, for example, to give to voice actors.

It is designed to be as easy as possible to understand and write dialogue in a rapid and easy manner, once setup within your game. 
It can easily be exported and implemented to any project, with only needing to change a few GUI elements of the system.

This dialogue system was created soley by me and are free to use by anybody without giving credit, if you have purchased it.
Similar system was initially created for use in my own game "Ocean Storm", and have now decided to share it.
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Macros - IMPORTANT
/*

The following Macros are being used throughout the project. It is essential you create these in your project
for the system to work, unless you change the code yourself. To add a macro use Shift+Ctrl+N.

Name        Value
------      -------
LEFT        0
RIGHT       1
MIDDLE      2
B_S         0
B_N         1
B_R         2
B_RO        3
B_RN        4
B_C         5
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///System Explained:
/*

Think of the system as folders for windows.
We have our desktop(Tree), which is filled with various folders(Branches).
These folders then contain misclanious items (Dialogue/Choice Data).

Inside each of these folders there can be an indetermined amount of both folders and items.
And inside each of these folders can be even more folders and items. (Nested Data/Branches)
The folders can even have different types. Some are maybe a zip, others a rar or a 7z. (Types)

Now imagine each item in the folder had a number. The first item is number 0, the next number 1, etc. (Indexes)
What the system basically does is goes through these folders and finds the next index based on the type of the folder.
One folder type may find it sequentially while others may pick one at random.

Once an index is found, it is then looked at to see what it is:
If it's another folder, it opens that folder, and runs it's type code to find another index.
It keeps doing this, until it either finds a dialogue, or a folder called "Choice".

Choice is a special kind of folder, it contains only choices. These choices are basically links to others
folders, taking you to them if you click the link. They can however also just close all folders.

Dialogue however, is what is displayed on the screen. Once a dialogue is found, it is then played.
Once it is played, depending on the folder type, it either ends or asks the same folder to find the next index.

If it ends, we then close the folder and take a look at our previous folder. Does this also end, or will it
find another index for us to run?

If we keep closing folders, and return to the desktop, our dialogue system is then finished and it closes.
The folders however, are not destroyed, and can be opened up at anytime in order to begin again.

What the controller does, is basically creating all these folders and items, using scripts setup in an easy to understand manner.
It is also informed everytime a folder is closed, a dialogue is played, or a choice is choosen, allowing it to interupt
the next action and force a branch change, cause an achivement, unlock an option, shake the screen, cause actors to move, anything you desire.

This is the basic idea of how the system works.
Hope this helps you understand it better.

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///How to Use:
/*

When creating dialogue, the only thing you need to worry about, once the system have been setup and implemented into your game, is the controller.
Here you will create dialogue in an easy and hopefully understandable manner. In the project is an example that makes full use of all the features avaliable
within the system. Refer to that, to see how to create and write dialogue.

 *   Import to your project:
    *   Remember to import macros.
 *   Create a controller:
 *   Start writing dialogue scripts!

You don't need to import the ctr_pause, ctr_dialogue_example or the obj_startdialogue.
The ctr_globals can also be avoided, just make sure you initialize the globals somewhere.


//
// Customization
//

To customize the behavior and placement of the dialog system, look for the ctr_globals where all values
have been stored for you to easily access and change, the size, font, etc, without having to go through the code.

Variables that are not listed in the ctr_globals you would have to go through the code to implement. The code have been
thoroughly commented to make this situation easier should it occur. However I am aiming for as much customizability as possible,
so if there's any features you desire or are missing let me know.
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Branch Types
/*

The following is a list of the different types of branches and their behaviour when handling dialogue.

Name: Sequence Branch
Macro: B_S = 0
Description:  The sequence branch keeps playing stored indexes until branch ends.

Name: Next Branch
Macro: B_N = 1
Description:  The next branch plays the next sequential index then branch ends. Remembers position for next call.

Name: Random Branch
Macro: B_R = 2
Description:  The random branch chooses an index within it's list randomily and the ends.

Name: Random Once Branch
Macro: B_RO = 3
Description:  The random once branch chooses an index within it's list randomily and the ends. Once an index is choosen, it is then excluded from future random selections. If all indexes have been marked as played, the branch then resets all indexes.

Name: Random Nested Branch
Macro: B_RN = 4
Description:  The random nested branch chooses an index within it's list randomily and the ends. Once an index is choosen, it is then excluded from future random selections. If all indexes have been marked as played, the branch then resets all indexes. The random nested branch is NOT excluded until all it's indexes have been played. This behaviour also applies when nested in a next branch.

Name: Choice Branch
Macro: B_C = 5
Description:  Branch contains no dialogue or branches, only choices. All choices are created once run. Is created automatically when choices are created.


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///FAQ
/*

Q: How do I disable actors?

A: Go to scr_dialogue and remove the actor argument and replace it with obj_actor invisible.
Remember to update argument count for other arguments. If you wish to remove the namefield, place
it out of the camera bounds or replace the sprite with an invisible one, or remove the draw code
from obj_diabox.

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Terminology
/*

Below is an overview list of some of the terminology used. If any are missing that you are confused about, let me know, and I'll add them to the list.

Tree: 
Reference to obj_tree. A object and system that handles all branches and dialogue. Also serves as root.

Branch: 
Reference to obj_branch. A node, which can contain multiple nested branches and dialogue/choices.

Parent: 
The branch that contains nested branches. Parent is reference to the branch directly prior to the current.

Child: 
The nested branches within a branch. Child is reference to the branch contained within the current one.

Ancestor: 
Same as parent, but used when referencing nested parents.

Descendant:
Same as child, but used when referencing nested children.

Root:
First/Top branch in the dialogue system. In this case, the obj_tree OR all branches at index 0 in the tree's arraylist.

Nested:
A term used to descripe something within something. For example, an array, within an array, within an array.
In this case, most likely used to describe branches within branches.

Composite Pattern:
Reference to the design-pattern of the dialogue system or the use of recursion in methods that follow this pattern. 
For more on composite patterns see: https://en.wikipedia.org/wiki/Composite_pattern


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
