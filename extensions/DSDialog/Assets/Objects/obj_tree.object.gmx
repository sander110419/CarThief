<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Creation Code

//Instance Variables
canskip = false;
instant_canplay = true;
pause_alarm = noone;
endScript = noone;
speech = noone;
interupt = false;
dialogue = noone;
branch = noone;
list[0] = noone;
size = 0;
choices_max = dsdia.choices_max;
actors_max = dsdia.actors_max;
autocontinue = global.autocontinue;
mouseskip = global.mouseskip;
keyboard = global.keyboard;
mouse_can_skip = true;

//Choices Array.
var i = 0;
repeat choices_max
{
    choices[i] = noone;
    i++;
}

//Actor Array.
var i = 0;
repeat actors_max
{
    actors[i] = noone;
    i++;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Cleans up all dialogue to avoid leaks.

//Runs cleanup script.
scr_dialogue_cleanup(id);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Allows mouse-click skipping.
mouse_can_skip = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Resets instant play variable.
instant_canplay = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Runs the dialogue.

//Play the dialogue system. Does this running the myScript for the current branch.
//Initial branch is set at index 0 in the arraylist of tree by default. 
//Refer to type scripts for each branch to see how they handle dialogue. These scripts then determine
//what dialogue is played and how to proceed once dialogue ends.

//Enables Skip
canskip = true;

//Destroys active dialogue.
with dialogue
{
    instance_destroy();
}

//Changes highlight of actors.
var i;
for (i=0; i&lt;actors_max; i++)
{
    //Checks if actor.
    if actors[i] != noone
    {
        //Activates outfade on actor.
        actors[i].fadein = true;
    }
}

//Runs the script for branch to find dialogue.
script_execute(branch.myScript, branch);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Handles mouse skipping.

//Checks for pause.
if global.pause exit;

//Checks if mouse-skip is enable.
if !mouseskip exit;

//Checks if can skip.
if !mouse_can_skip exit;

//Skips Current Dialogue
if mouse_check_button_pressed(mb_left)
{
    event_user(7);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="17">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Skips dialogue.

//Checks if canskip.
if canskip
{
    //Checks if dialogue is complete.
    if dialogue.complete
    {
        //Stops Audio.
        audio_stop_sound(speech);
        
        //Disables skip.
        canskip = false;
        
        //Checks for branch ending type.
        if !branch.ends
        {
            //Starts alarm on tree.
            alarm[0] = 1;
        }
        else
        {
            //Starts alarm on branch.
            branch.alarm[0] = 1;
        }
    }
    else
    {
        //Completes dialogue.
        user_event(dialogue, 0);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="16">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Runs the dialogue instantly.

//Play the dialogue system. Does this running the myScript for the current branch.
//Initial branch is set at index 0 in the arraylist of tree by default. 
//Refer to type scripts for each branch to see how they handle dialogue. These scripts then determine
//what dialogue is played and how to proceed once dialogue ends.

//This works exactly the same as alarm, but can be run instantly, so run this instead of setting the alarm to 1 step.

//Checks if canplay, to avoid duplicate running of this event.
if instant_canplay = false exit;

//Updates canplay and sets alarm to reset.
instant_canplay = false;
alarm[1] = 1;

//Enables Skip
canskip = true;

//Destroys active dialogue.
with dialogue
{
    instance_destroy();
}

//Changes highlight of actors.
var i;
for (i=0; i&lt;actors_max; i++)
{
    //Checks if actor.
    if actors[i] != noone
    {
        //Activates outfade on actor.
        actors[i].fadein = true;
    }
}

//Runs the script for branch to find dialogue.
script_execute(branch.myScript, branch);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="15">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Destroys Actors

//Enters a loop for each index.
var i;
for (i=0; i&lt;actors_max; i++)
{
    //Destroys object.
    with actors[i]
    {
        instance_destroy();
    }
    
    //Clears index.
    actors[i] = noone;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="14">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Destroys active choices.

//Tempoarly disables mouseclick skipping.
mouse_can_skip = false;
alarm[2] = 1;

//Enters a loop for each index.
var i;
for (i=0; i&lt;choices_max; i++)
{
    //Destroys object.
    with choices[i]
    {
        instance_destroy();
    }
    
    //Clears index.
    choices[i] = noone;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Ends dialogue.

//Stops Dialogue
event_user(1);

//Destroys Self
instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Resets dialogue tree to default.

//Recursive script to reset dialogue.
scr_dialogue_restore_default(self.id);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Stops dialogue.

//Checks if interupt.
if !interupt
{
    //Stops continuation.
    //Is used if called from scr_dialogue_stop()
    audio_stop_sound(speech);
    canskip = false;
    alarm[0] = -1;
    
    //Checks if exit tween for diabox.
    if global.dialogtween
    {    
        //Starts destruction tween.
        user_event(diabox, 0);
    }
    else
    {
        //Destroys dialoguebox.
        with diabox
        {
            instance_destroy();
        }
    }
    
    //Destroys active dialogue.
    with dialogue
    {
        instance_destroy();
    }
    
    //Destroys active choices.
    event_user(4);
    
    //Destroys actors on screen.
    event_user(5);
    
    //Updates canplay and sets alarm to reset.
    instant_canplay = false;
    alarm[1] = 1;
}

//Resets interupt.
interupt = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Starts Dialogue

//Creates dialoguebox.
diabox = instance_create(dsdia.diabox_x, dsdia.diabox_y, obj_diabox);

//Starts the alarm that runs dialogue.
alarm[0] = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Handles keyboard actions.

//Pauses Dialogue System
if keyboard_check_pressed(global.pause_hotkey)
{
    //Checks if not paused.
    if !global.pause
    {
        //Updates Pause
        global.pause = true;
        
        //Pauses Alarms
        pause_alarm = alarm[0];
        alarm[0] = -1;
        branch.pause_alarm = branch.alarm[0];
        branch.alarm[0] = -1;
        
        //Pauses Audio
        audio_pause_sound(speech);   
    }
    else
    {
        //Updates Pause
        global.pause = false;
        
        //Resumes Alarm
        alarm[0] = pause_alarm;
        branch.alarm[0] = branch.pause_alarm;
        
        //Resumes Audio
        audio_resume_sound(speech);
    }
}

//Checks for pause.
if global.pause exit;

//Skips Current Dialogue
if keyboard_check_pressed(global.skip_hotkey)
{
    event_user(7);
}

//Check if keyboard movement.
if keyboard
{
    //Goes a choice up.
    if keyboard_check_pressed(global.nbr_down_hotkey)
    {
        global.nbr += 1;
        if global.nbr &gt; global.nbr_max -1
        {
            global.nbr = global.nbr_max -1;
        }
    }
    
    //Goes a choice down.
    if keyboard_check_pressed(global.nbr_up_hotkey)
    {
        global.nbr -= 1;
        if global.nbr &lt; 0 
        {
            global.nbr = 0;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
