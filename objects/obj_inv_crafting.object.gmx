<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//call parent create event
event_inherited();

//array containing crafting slots
crafting_slots = -1;
//slot where recipe results are put
result_slot = -1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///slot right pressed event

/*
    We don't want to allow taking only part of the resulting recipe, as
    we can't remove fraction of ingredients. Only perform this event on
    a crafting slot.
*/

var slot = other.id;

if(slot != result_slot) {
    event_inherited();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///slot pressed event

//if a slot other than the result slot is pressed, behave normally
var slot = other.id;

if(slot != result_slot) {
    event_inherited();
}

//if the result slot has been pressed, try to take resulting item (if present)
else if(result_slot.item &gt;= 0) {
    var mouse_slot = obj_inv_mouse.slots[0];
    //we can't allow to take only part of the resulting item, take only if there's enough space
    if(result_slot.amount + mouse_slot.amount &lt;= result_slot.item[? "stack_size"]) {
        var amount = ex_inv_add_slot(obj_inv_mouse.inv,result_slot.item,result_slot.amount,0);
        if(amount &gt; 0) {
            //disable recipe checking until all items of the recipe have been removed
            inv_changed_event_enabled(false);
            for(var i=0; i&lt;array_length_1d(crafting_slots); i++) {
                ex_inv_remove_slot(inv,1,crafting_slots[i].index);
            }
            //enable recipe checking, and manually start a check after all slots have been created
            inv_changed_event_enabled(true);
            //check if there's a recipe ready after removing the current item
            event_user(panel_events.inventory_changed);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///inventory changed event

/*
    when the crafting inventory changes, check for recipe with current items
*/

//generate a ds_list of item keys from the crafting slots
var items = ds_list_create();
for(var i=0; i&lt;array_length_1d(crafting_slots); i++) {
    var slot = slots[i];
    if(slot.item &gt;= 0) {ds_list_add(items,slot.item[? "base_key"]);}
}

//check if there's a valid recipe for the items currently in the slots
var recipe = craft_find_recipe(items);

if(recipe != -1) {
    //recipe is found, set the resulting item into the result slot
    inv_changed_event_enabled(false);
    ex_inv_set_slot(inv,recipe[? "result_key"],recipe[? "result_amount"],result_slot.index);
    inv_changed_event_enabled(true);
}
else {
    //recipe not found, remove any items from the result slot (if any)
    inv_changed_event_enabled(false);
    ex_inv_remove_slot(inv,-1,result_slot.index);
    inv_changed_event_enabled(true);
}

//destroy the list of items used for recipe checking
ds_list_destroy(items);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///on create event

//create the slot for the resulting items
result_slot = inv_slot_create(240,0,id,array_length_1d(slots)-1);

//create slot instances for the ingredients
var num_ingredients = 4;
for(var i=0; i &lt; num_ingredients; i++) {
    crafting_slots[i] = inv_slot_create(48*(i mod num_ingredients),0,id,i);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
