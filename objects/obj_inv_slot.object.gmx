<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_slot_empty</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>-500</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//base attributes
item = -1; //item associated to this slot
key = ""; //key of the current item
amount = 0; //current amount of items in the slot
rel_x = 0; //x position relative to the panel
rel_y = 0; //y position relative to the panel
panel = -1; //panel instance
inv = -1; //related inventory
index = -1; //slot index in the inventory

//default sprite attributes
sprite_index = spr_slot_empty; //set the default empty slot sprite
image_speed = 0;
image_index = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///stick slot to panel

x = panel.x+rel_x;
y = panel.y+rel_y;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///call panel right pressed event
//with(panel) {
//    event_user(panel_events.slot_right_pressed);
//}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///call panel left pressed event
with(panel) {
    event_user(panel_events.slot_left_pressed);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///on update/change event

/*
    This event refreshes the slot, and has to be called when the slot item in the
    inventory gets an update.
    e.g: The amount changes, the item is removed or switched, ...
*/

var inv_item = ex_inv_get_item(inv,index); //get item

//if inventory slot is empty, clear slot data
if(inv_item &lt; 0) {
    if(item &gt;= 0) {
        item = -1;
        amount = 0;
        sprite_index = spr_slot_empty;
        image_index = 0;
    }
}
    
//if item is empty or different from the current one, replace
else if(item != inv_item) {
    item = inv_item;
    amount = ex_inv_get_amount(inv,index); //assign amount
    sprite_index = asset_get_index(item[? "sprite"]); //get sprite
    image_index = item[? "image"];
}
    
//same item, different amount
else if(amount != ex_inv_get_amount(inv,index)) {
    amount = ex_inv_get_amount(inv,index);
}

//set the key for easy access
if(item &lt; 0) {key = "";}
else {key = item[? "key"];}

//call panel slot changed event
with(panel) {
    event_user(panel_events.slot_updated);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw slot

if(item &gt;= 0) {
    draw_self();
    
    //if amount greater than 1, draw it in the corner
    if(amount &gt; 1) {
       // draw_set_font(fnt_ex);
        //draw_set_valign(fa_middle);
        //draw_set_halign(fa_center);
        draw_set_color(c_black);
        draw_text(x+17,y+17,"");
        draw_set_color(c_white);
        draw_text(x+16,y+16,"");
    }
        
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
